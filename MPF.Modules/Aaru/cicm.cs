//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
//This source code was auto-generated by MonoXSD
//

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Schemas;

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code"),
 XmlRoot("CICMMetadata", Namespace = "", IsNullable = false), Obsolete("Will be removed in Aaru 7")]
public class CICMMetadataType
{
    string[] developerField;

    string[] publisherField;

    string[] authorField;

    string[] performerField;

    string nameField;

    string versionField;

    CICMMetadataTypeReleaseType releaseTypeField;

    bool releaseTypeFieldSpecified;

    DateTime releaseDateField;

    bool releaseDateFieldSpecified;

    BarcodeType[] barcodesField;

    string partNumberField;

    string serialNumberField;

    string[] keywordsField;

    MagazineType[] magazineField;

    BookType[] bookField;

    string[] categoriesField;

    string[] subcategoriesField;

    LanguagesTypeLanguage[] languagesField;

    string[] systemsField;

    ArchitecturesTypeArchitecture[] architecturesField;

    RequiredOperatingSystemType[] requiredOperatingSystemsField;

    UserManualType[] userManualField;

    OpticalDiscType[] opticalDiscField;

    AdvertisementType[] advertisementField;

    LinearMediaType[] linearMediaField;

    PCIType[] pCICardField;

    BlockMediaType[] blockMediaField;

    AudioMediaType[] audioMediaField;

    /// <remarks />
    [XmlElement("Developer")]
    public string[] Developer
    {
        get => developerField;
        set => developerField = value;
    }

    /// <remarks />
    [XmlElement("Publisher")]
    public string[] Publisher
    {
        get => publisherField;
        set => publisherField = value;
    }

    /// <remarks />
    [XmlElement("Author")]
    public string[] Author
    {
        get => authorField;
        set => authorField = value;
    }

    /// <remarks />
    [XmlElement("Performer")]
    public string[] Performer
    {
        get => performerField;
        set => performerField = value;
    }

    /// <remarks />
    public string Name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    public string Version
    {
        get => versionField;
        set => versionField = value;
    }

    /// <remarks />
    public CICMMetadataTypeReleaseType ReleaseType
    {
        get => releaseTypeField;
        set => releaseTypeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool ReleaseTypeSpecified
    {
        get => releaseTypeFieldSpecified;
        set => releaseTypeFieldSpecified = value;
    }

    /// <remarks />
    [XmlElement(DataType = "date")]
    public DateTime ReleaseDate
    {
        get => releaseDateField;
        set => releaseDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool ReleaseDateSpecified
    {
        get => releaseDateFieldSpecified;
        set => releaseDateFieldSpecified = value;
    }

    /// <remarks />
    [XmlArrayItem("Barcode", IsNullable = false)]
    public BarcodeType[] Barcodes
    {
        get => barcodesField;
        set => barcodesField = value;
    }

    /// <remarks />
    public string PartNumber
    {
        get => partNumberField;
        set => partNumberField = value;
    }

    /// <remarks />
    public string SerialNumber
    {
        get => serialNumberField;
        set => serialNumberField = value;
    }

    /// <remarks />
    [XmlArrayItem("Keyword", IsNullable = false)]
    public string[] Keywords
    {
        get => keywordsField;
        set => keywordsField = value;
    }

    /// <remarks />
    [XmlElement("Magazine")]
    public MagazineType[] Magazine
    {
        get => magazineField;
        set => magazineField = value;
    }

    /// <remarks />
    [XmlElement("Book")]
    public BookType[] Book
    {
        get => bookField;
        set => bookField = value;
    }

    /// <remarks />
    [XmlArrayItem("Category", IsNullable = false)]
    public string[] Categories
    {
        get => categoriesField;
        set => categoriesField = value;
    }

    /// <remarks />
    [XmlArrayItem("Subcategory", IsNullable = false)]
    public string[] Subcategories
    {
        get => subcategoriesField;
        set => subcategoriesField = value;
    }

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Languages
    {
        get => languagesField;
        set => languagesField = value;
    }

    /// <remarks />
    [XmlArrayItem("System", IsNullable = false)]
    public string[] Systems
    {
        get => systemsField;
        set => systemsField = value;
    }

    /// <remarks />
    [XmlArrayItem("Architecture", IsNullable = false)]
    public ArchitecturesTypeArchitecture[] Architectures
    {
        get => architecturesField;
        set => architecturesField = value;
    }

    /// <remarks />
    [XmlArrayItem("RequiredOperatingSystem", IsNullable = false)]
    public RequiredOperatingSystemType[] RequiredOperatingSystems
    {
        get => requiredOperatingSystemsField;
        set => requiredOperatingSystemsField = value;
    }

    /// <remarks />
    [XmlElement("UserManual")]
    public UserManualType[] UserManual
    {
        get => userManualField;
        set => userManualField = value;
    }

    /// <remarks />
    [XmlElement("OpticalDisc")]
    public OpticalDiscType[] OpticalDisc
    {
        get => opticalDiscField;
        set => opticalDiscField = value;
    }

    /// <remarks />
    [XmlElement("Advertisement")]
    public AdvertisementType[] Advertisement
    {
        get => advertisementField;
        set => advertisementField = value;
    }

    /// <remarks />
    [XmlElement("LinearMedia")]
    public LinearMediaType[] LinearMedia
    {
        get => linearMediaField;
        set => linearMediaField = value;
    }

    /// <remarks />
    [XmlElement("PCICard")]
    public PCIType[] PCICard
    {
        get => pCICardField;
        set => pCICardField = value;
    }

    /// <remarks />
    [XmlElement("BlockMedia")]
    public BlockMediaType[] BlockMedia
    {
        get => blockMediaField;
        set => blockMediaField = value;
    }

    /// <remarks />
    [XmlElement("AudioMedia")]
    public AudioMediaType[] AudioMedia
    {
        get => audioMediaField;
        set => audioMediaField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum CICMMetadataTypeReleaseType
{
    /// <remarks />
    Retail,

    /// <remarks />
    Bundle,

    /// <remarks />
    Coverdisc,

    /// <remarks />
    Subscription,

    /// <remarks />
    Demo,

    /// <remarks />
    OEM,

    /// <remarks />
    Shareware,

    /// <remarks />
    FOSS,

    /// <remarks />
    Adware,

    /// <remarks />
    Donationware,

    /// <remarks />
    [XmlEnum("Digital download")]
    Digitaldownload,

    /// <remarks />
    SaaS
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class BarcodeType
{
    BarcodeTypeType typeField;

    string valueField;

    /// <remarks />
    [XmlAttribute]
    public BarcodeTypeType type
    {
        get => typeField;
        set => typeField = value;
    }

    /// <remarks />
    [XmlText]
    public string Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum BarcodeTypeType
{
    /// <remarks />
    aztec,

    /// <remarks />
    codabar,

    /// <remarks />
    code11,

    /// <remarks />
    code128,

    /// <remarks />
    code39,

    /// <remarks />
    code93,

    /// <remarks />
    cpcbinary,

    /// <remarks />
    ezcode,

    /// <remarks />
    fim,

    /// <remarks />
    itf,

    /// <remarks />
    itf14,

    /// <remarks />
    ean13,

    /// <remarks />
    ean8,

    /// <remarks />
    maxicode,

    /// <remarks />
    isbn,

    /// <remarks />
    isrc,

    /// <remarks />
    msi,

    /// <remarks />
    tof,

    /// <remarks />
    shotcode,

    /// <remarks />
    rm4scc,

    /// <remarks />
    qr,

    /// <remarks />
    ean5,

    /// <remarks />
    ean2,

    /// <remarks />
    [XmlEnum("qr")]
    qr1,

    /// <remarks />
    postnet,

    /// <remarks />
    postbar,

    /// <remarks />
    plessey,

    /// <remarks />
    pharmacode,

    /// <remarks />
    pdf417,

    /// <remarks />
    patchcode
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class AudioBlockType
{
    ImageType imageField;

    ulong sizeField;

    string accoustIDField;

    ChecksumType[] checksumsField;

    string formatField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    public string AccoustID
    {
        get => accoustIDField;
        set => accoustIDField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    public string Format
    {
        get => formatField;
        set => formatField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ImageType
{
    string formatField;

    ulong offsetField;

    bool offsetFieldSpecified;

    string valueField;

    /// <remarks />
    [XmlAttribute]
    public string format
    {
        get => formatField;
        set => formatField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong offset
    {
        get => offsetField;
        set => offsetField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool offsetSpecified
    {
        get => offsetFieldSpecified;
        set => offsetFieldSpecified = value;
    }

    /// <remarks />
    [XmlText]
    public string Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ChecksumType
{
    ChecksumTypeType typeField;

    string valueField;

    /// <remarks />
    [XmlAttribute]
    public ChecksumTypeType type
    {
        get => typeField;
        set => typeField = value;
    }

    /// <remarks />
    [XmlText]
    public string Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum ChecksumTypeType
{
    /// <remarks />
    fletcher16,

    /// <remarks />
    fletcher32,

    /// <remarks />
    adler32,

    /// <remarks />
    crc16,

    /// <remarks />
    crc16ccitt,

    /// <remarks />
    crc32,

    /// <remarks />
    crc64,

    /// <remarks />
    md4,

    /// <remarks />
    md5,

    /// <remarks />
    dm6,

    /// <remarks />
    ripemd128,

    /// <remarks />
    ripemd160,

    /// <remarks />
    ripemed320,

    /// <remarks />
    sha1,

    /// <remarks />
    sha224,

    /// <remarks />
    sha256,

    /// <remarks />
    sha384,

    /// <remarks />
    sha512,

    /// <remarks />
    sha3,

    /// <remarks />
    skein,

    /// <remarks />
    snefru,

    /// <remarks />
    blake256,

    /// <remarks />
    blake512,

    /// <remarks />
    tiger,

    /// <remarks />
    whirlpool,

    /// <remarks />
    spamsum
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class AudioMediaType
{
    ImageType imageField;

    ulong sizeField;

    ChecksumType[] checksumsField;

    SequenceType sequenceField;

    string partNumberField;

    string serialNumberField;

    string manufacturerField;

    string modelField;

    string accoustIDField;

    AudioBlockType[] blockField;

    string copyProtectionField;

    DimensionsType dimensionsField;

    ScansType scansField;

    DumpHardwareType[] dumpHardwareArrayField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    public SequenceType Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    public string PartNumber
    {
        get => partNumberField;
        set => partNumberField = value;
    }

    /// <remarks />
    public string SerialNumber
    {
        get => serialNumberField;
        set => serialNumberField = value;
    }

    /// <remarks />
    public string Manufacturer
    {
        get => manufacturerField;
        set => manufacturerField = value;
    }

    /// <remarks />
    public string Model
    {
        get => modelField;
        set => modelField = value;
    }

    /// <remarks />
    public string AccoustID
    {
        get => accoustIDField;
        set => accoustIDField = value;
    }

    /// <remarks />
    [XmlElement("Block")]
    public AudioBlockType[] Block
    {
        get => blockField;
        set => blockField = value;
    }

    /// <remarks />
    public string CopyProtection
    {
        get => copyProtectionField;
        set => copyProtectionField = value;
    }

    /// <remarks />
    public DimensionsType Dimensions
    {
        get => dimensionsField;
        set => dimensionsField = value;
    }

    /// <remarks />
    public ScansType Scans
    {
        get => scansField;
        set => scansField = value;
    }

    /// <remarks />
    [XmlArrayItem("DumpHardware", IsNullable = false)]
    public DumpHardwareType[] DumpHardwareArray
    {
        get => dumpHardwareArrayField;
        set => dumpHardwareArrayField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class SequenceType
{
    string mediaTitleField;

    uint mediaSequenceField;

    uint totalMediaField;

    byte sideField;

    bool sideFieldSpecified;

    byte layerField;

    bool layerFieldSpecified;

    /// <remarks />
    public string MediaTitle
    {
        get => mediaTitleField;
        set => mediaTitleField = value;
    }

    /// <remarks />
    public uint MediaSequence
    {
        get => mediaSequenceField;
        set => mediaSequenceField = value;
    }

    /// <remarks />
    public uint TotalMedia
    {
        get => totalMediaField;
        set => totalMediaField = value;
    }

    /// <remarks />
    public byte Side
    {
        get => sideField;
        set => sideField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool SideSpecified
    {
        get => sideFieldSpecified;
        set => sideFieldSpecified = value;
    }

    /// <remarks />
    public byte Layer
    {
        get => layerField;
        set => layerField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool LayerSpecified
    {
        get => layerFieldSpecified;
        set => layerFieldSpecified = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class DimensionsType
{
    double diameterField;

    bool diameterFieldSpecified;

    double heightField;

    bool heightFieldSpecified;

    double widthField;

    bool widthFieldSpecified;

    double thicknessField;

    /// <remarks />
    public double Diameter
    {
        get => diameterField;
        set => diameterField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool DiameterSpecified
    {
        get => diameterFieldSpecified;
        set => diameterFieldSpecified = value;
    }

    /// <remarks />
    public double Height
    {
        get => heightField;
        set => heightField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool HeightSpecified
    {
        get => heightFieldSpecified;
        set => heightFieldSpecified = value;
    }

    /// <remarks />
    public double Width
    {
        get => widthField;
        set => widthField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool WidthSpecified
    {
        get => widthFieldSpecified;
        set => widthFieldSpecified = value;
    }

    /// <remarks />
    public double Thickness
    {
        get => thicknessField;
        set => thicknessField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ScansType
{
    CaseScanType caseScanField;

    MediaScanType scanField;

    /// <remarks />
    public CaseScanType CaseScan
    {
        get => caseScanField;
        set => caseScanField = value;
    }

    /// <remarks />
    public MediaScanType Scan
    {
        get => scanField;
        set => scanField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class CaseScanType
{
    CaseScanTypeCaseScanElement caseScanElementField;

    ScanType scanField;

    /// <remarks />
    public CaseScanTypeCaseScanElement CaseScanElement
    {
        get => caseScanElementField;
        set => caseScanElementField = value;
    }

    /// <remarks />
    public ScanType Scan
    {
        get => scanField;
        set => scanField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum CaseScanTypeCaseScanElement
{
    /// <remarks />
    sleeve,

    /// <remarks />
    inner,

    /// <remarks />
    inlay,

    /// <remarks />
    frontback,

    /// <remarks />
    frontfull,

    /// <remarks />
    boxfront,

    /// <remarks />
    boxback,

    /// <remarks />
    boxspine,

    /// <remarks />
    external
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ScanType
{
    FileType fileField;

    ChecksumType[] checksumsField;

    ScannerType[] scannerField;

    ScanProcessingType[] scanProcessingField;

    OCRType[] oCRField;

    /// <remarks />
    public FileType File
    {
        get => fileField;
        set => fileField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlElement("Scanner")]
    public ScannerType[] Scanner
    {
        get => scannerField;
        set => scannerField = value;
    }

    /// <remarks />
    [XmlElement("ScanProcessing")]
    public ScanProcessingType[] ScanProcessing
    {
        get => scanProcessingField;
        set => scanProcessingField = value;
    }

    /// <remarks />
    [XmlElement("OCR")]
    public OCRType[] OCR
    {
        get => oCRField;
        set => oCRField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class FileType
{
    string formatField;

    string valueField;

    /// <remarks />
    [XmlAttribute]
    public string format
    {
        get => formatField;
        set => formatField = value;
    }

    /// <remarks />
    [XmlText]
    public string Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ScannerType
{
    string authorField;

    string manufacturerField;

    string modelField;

    string serialField;

    string softwareField;

    string softwareVersionField;

    /// <remarks />
    public string Author
    {
        get => authorField;
        set => authorField = value;
    }

    /// <remarks />
    public string Manufacturer
    {
        get => manufacturerField;
        set => manufacturerField = value;
    }

    /// <remarks />
    public string Model
    {
        get => modelField;
        set => modelField = value;
    }

    /// <remarks />
    public string Serial
    {
        get => serialField;
        set => serialField = value;
    }

    /// <remarks />
    public string Software
    {
        get => softwareField;
        set => softwareField = value;
    }

    /// <remarks />
    public string SoftwareVersion
    {
        get => softwareVersionField;
        set => softwareVersionField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ScanProcessingType
{
    string authorField;

    string softwareField;

    string softwareVersionField;

    /// <remarks />
    public string Author
    {
        get => authorField;
        set => authorField = value;
    }

    /// <remarks />
    public string Software
    {
        get => softwareField;
        set => softwareField = value;
    }

    /// <remarks />
    public string SoftwareVersion
    {
        get => softwareVersionField;
        set => softwareVersionField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class OCRType
{
    string authorField;

    string softwareField;

    string softwareVersionField;

    LanguagesTypeLanguage[] languageField;

    /// <remarks />
    public string Author
    {
        get => authorField;
        set => authorField = value;
    }

    /// <remarks />
    public string Software
    {
        get => softwareField;
        set => softwareField = value;
    }

    /// <remarks />
    public string SoftwareVersion
    {
        get => softwareVersionField;
        set => softwareVersionField = value;
    }

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Language
    {
        get => languageField;
        set => languageField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum LanguagesTypeLanguage
{
    /// <remarks />
    aar,

    /// <remarks />
    abk,

    /// <remarks />
    ace,

    /// <remarks />
    ach,

    /// <remarks />
    ada,

    /// <remarks />
    ady,

    /// <remarks />
    afa,

    /// <remarks />
    afh,

    /// <remarks />
    afr,

    /// <remarks />
    ain,

    /// <remarks />
    aka,

    /// <remarks />
    akk,

    /// <remarks />
    alb,

    /// <remarks />
    ale,

    /// <remarks />
    alg,

    /// <remarks />
    alt,

    /// <remarks />
    amh,

    /// <remarks />
    ang,

    /// <remarks />
    anp,

    /// <remarks />
    apa,

    /// <remarks />
    ara,

    /// <remarks />
    arc,

    /// <remarks />
    arg,

    /// <remarks />
    arm,

    /// <remarks />
    arn,

    /// <remarks />
    arp,

    /// <remarks />
    art,

    /// <remarks />
    arw,

    /// <remarks />
    asm,

    /// <remarks />
    ast,

    /// <remarks />
    ath,

    /// <remarks />
    aus,

    /// <remarks />
    ava,

    /// <remarks />
    ave,

    /// <remarks />
    awa,

    /// <remarks />
    aym,

    /// <remarks />
    aze,

    /// <remarks />
    bad,

    /// <remarks />
    bai,

    /// <remarks />
    bak,

    /// <remarks />
    bal,

    /// <remarks />
    bam,

    /// <remarks />
    ban,

    /// <remarks />
    baq,

    /// <remarks />
    bas,

    /// <remarks />
    bat,

    /// <remarks />
    bej,

    /// <remarks />
    bel,

    /// <remarks />
    bem,

    /// <remarks />
    ben,

    /// <remarks />
    ber,

    /// <remarks />
    bho,

    /// <remarks />
    bih,

    /// <remarks />
    bik,

    /// <remarks />
    bin,

    /// <remarks />
    bis,

    /// <remarks />
    bla,

    /// <remarks />
    bnt,

    /// <remarks />
    bos,

    /// <remarks />
    bra,

    /// <remarks />
    bre,

    /// <remarks />
    btk,

    /// <remarks />
    bua,

    /// <remarks />
    bug,

    /// <remarks />
    bul,

    /// <remarks />
    bur,

    /// <remarks />
    byn,

    /// <remarks />
    cad,

    /// <remarks />
    cai,

    /// <remarks />
    car,

    /// <remarks />
    cat,

    /// <remarks />
    cau,

    /// <remarks />
    ceb,

    /// <remarks />
    cel,

    /// <remarks />
    cha,

    /// <remarks />
    chb,

    /// <remarks />
    che,

    /// <remarks />
    chg,

    /// <remarks />
    chi,

    /// <remarks />
    chk,

    /// <remarks />
    chm,

    /// <remarks />
    chn,

    /// <remarks />
    cho,

    /// <remarks />
    chp,

    /// <remarks />
    chr,

    /// <remarks />
    chu,

    /// <remarks />
    chv,

    /// <remarks />
    chy,

    /// <remarks />
    cmc,

    /// <remarks />
    cop,

    /// <remarks />
    cor,

    /// <remarks />
    cos,

    /// <remarks />
    cpe,

    /// <remarks />
    cpf,

    /// <remarks />
    cpp,

    /// <remarks />
    cre,

    /// <remarks />
    crh,

    /// <remarks />
    crp,

    /// <remarks />
    csb,

    /// <remarks />
    cus,

    /// <remarks />
    cze,

    /// <remarks />
    dak,

    /// <remarks />
    dan,

    /// <remarks />
    dar,

    /// <remarks />
    day,

    /// <remarks />
    del,

    /// <remarks />
    den,

    /// <remarks />
    dgr,

    /// <remarks />
    din,

    /// <remarks />
    div,

    /// <remarks />
    doi,

    /// <remarks />
    dra,

    /// <remarks />
    dsb,

    /// <remarks />
    dua,

    /// <remarks />
    dum,

    /// <remarks />
    dut,

    /// <remarks />
    dyu,

    /// <remarks />
    dzo,

    /// <remarks />
    efi,

    /// <remarks />
    egy,

    /// <remarks />
    eka,

    /// <remarks />
    elx,

    /// <remarks />
    eng,

    /// <remarks />
    enm,

    /// <remarks />
    epo,

    /// <remarks />
    est,

    /// <remarks />
    ewe,

    /// <remarks />
    ewo,

    /// <remarks />
    fan,

    /// <remarks />
    fao,

    /// <remarks />
    fat,

    /// <remarks />
    fij,

    /// <remarks />
    fil,

    /// <remarks />
    fin,

    /// <remarks />
    fiu,

    /// <remarks />
    fon,

    /// <remarks />
    fre,

    /// <remarks />
    frm,

    /// <remarks />
    fro,

    /// <remarks />
    frr,

    /// <remarks />
    frs,

    /// <remarks />
    fry,

    /// <remarks />
    ful,

    /// <remarks />
    fur,

    /// <remarks />
    gaa,

    /// <remarks />
    gay,

    /// <remarks />
    gba,

    /// <remarks />
    gem,

    /// <remarks />
    geo,

    /// <remarks />
    ger,

    /// <remarks />
    gez,

    /// <remarks />
    gil,

    /// <remarks />
    gla,

    /// <remarks />
    gle,

    /// <remarks />
    glg,

    /// <remarks />
    glv,

    /// <remarks />
    gmh,

    /// <remarks />
    goh,

    /// <remarks />
    gon,

    /// <remarks />
    gor,

    /// <remarks />
    got,

    /// <remarks />
    grb,

    /// <remarks />
    grc,

    /// <remarks />
    gre,

    /// <remarks />
    grn,

    /// <remarks />
    gsw,

    /// <remarks />
    guj,

    /// <remarks />
    gwi,

    /// <remarks />
    hai,

    /// <remarks />
    hat,

    /// <remarks />
    hau,

    /// <remarks />
    haw,

    /// <remarks />
    heb,

    /// <remarks />
    her,

    /// <remarks />
    hil,

    /// <remarks />
    him,

    /// <remarks />
    hin,

    /// <remarks />
    hit,

    /// <remarks />
    hmn,

    /// <remarks />
    hmo,

    /// <remarks />
    hrv,

    /// <remarks />
    hsb,

    /// <remarks />
    hun,

    /// <remarks />
    hup,

    /// <remarks />
    iba,

    /// <remarks />
    ibo,

    /// <remarks />
    ice,

    /// <remarks />
    ido,

    /// <remarks />
    iii,

    /// <remarks />
    ijo,

    /// <remarks />
    iku,

    /// <remarks />
    ile,

    /// <remarks />
    ilo,

    /// <remarks />
    ina,

    /// <remarks />
    inc,

    /// <remarks />
    ind,

    /// <remarks />
    ine,

    /// <remarks />
    inh,

    /// <remarks />
    ipk,

    /// <remarks />
    ira,

    /// <remarks />
    iro,

    /// <remarks />
    ita,

    /// <remarks />
    jav,

    /// <remarks />
    jbo,

    /// <remarks />
    jpn,

    /// <remarks />
    jpr,

    /// <remarks />
    jrb,

    /// <remarks />
    kaa,

    /// <remarks />
    kab,

    /// <remarks />
    kac,

    /// <remarks />
    kal,

    /// <remarks />
    kam,

    /// <remarks />
    kan,

    /// <remarks />
    kar,

    /// <remarks />
    kas,

    /// <remarks />
    kau,

    /// <remarks />
    kaw,

    /// <remarks />
    kaz,

    /// <remarks />
    kbd,

    /// <remarks />
    kha,

    /// <remarks />
    khi,

    /// <remarks />
    khm,

    /// <remarks />
    kho,

    /// <remarks />
    kik,

    /// <remarks />
    kin,

    /// <remarks />
    kir,

    /// <remarks />
    kmb,

    /// <remarks />
    kok,

    /// <remarks />
    kom,

    /// <remarks />
    kon,

    /// <remarks />
    kor,

    /// <remarks />
    kos,

    /// <remarks />
    kpe,

    /// <remarks />
    krc,

    /// <remarks />
    krl,

    /// <remarks />
    kro,

    /// <remarks />
    kru,

    /// <remarks />
    kua,

    /// <remarks />
    kum,

    /// <remarks />
    kur,

    /// <remarks />
    kut,

    /// <remarks />
    lad,

    /// <remarks />
    lah,

    /// <remarks />
    lam,

    /// <remarks />
    lao,

    /// <remarks />
    lat,

    /// <remarks />
    lav,

    /// <remarks />
    lez,

    /// <remarks />
    lim,

    /// <remarks />
    lin,

    /// <remarks />
    lit,

    /// <remarks />
    lol,

    /// <remarks />
    loz,

    /// <remarks />
    ltz,

    /// <remarks />
    lua,

    /// <remarks />
    lub,

    /// <remarks />
    lug,

    /// <remarks />
    lui,

    /// <remarks />
    lun,

    /// <remarks />
    luo,

    /// <remarks />
    lus,

    /// <remarks />
    mac,

    /// <remarks />
    mad,

    /// <remarks />
    mag,

    /// <remarks />
    mah,

    /// <remarks />
    mai,

    /// <remarks />
    mak,

    /// <remarks />
    mal,

    /// <remarks />
    man,

    /// <remarks />
    mao,

    /// <remarks />
    map,

    /// <remarks />
    mar,

    /// <remarks />
    mas,

    /// <remarks />
    may,

    /// <remarks />
    mdf,

    /// <remarks />
    mdr,

    /// <remarks />
    men,

    /// <remarks />
    mga,

    /// <remarks />
    mic,

    /// <remarks />
    min,

    /// <remarks />
    mis,

    /// <remarks />
    mkh,

    /// <remarks />
    mlg,

    /// <remarks />
    mlt,

    /// <remarks />
    mnc,

    /// <remarks />
    mni,

    /// <remarks />
    mno,

    /// <remarks />
    moh,

    /// <remarks />
    mon,

    /// <remarks />
    mos,

    /// <remarks />
    mul,

    /// <remarks />
    mun,

    /// <remarks />
    mus,

    /// <remarks />
    mwl,

    /// <remarks />
    mwr,

    /// <remarks />
    myn,

    /// <remarks />
    myv,

    /// <remarks />
    nah,

    /// <remarks />
    nai,

    /// <remarks />
    nap,

    /// <remarks />
    nau,

    /// <remarks />
    nav,

    /// <remarks />
    nbl,

    /// <remarks />
    nde,

    /// <remarks />
    ndo,

    /// <remarks />
    nds,

    /// <remarks />
    nep,

    /// <remarks />
    @new,

    /// <remarks />
    nia,

    /// <remarks />
    nic,

    /// <remarks />
    niu,

    /// <remarks />
    nno,

    /// <remarks />
    nob,

    /// <remarks />
    nog,

    /// <remarks />
    non,

    /// <remarks />
    nor,

    /// <remarks />
    nqo,

    /// <remarks />
    nso,

    /// <remarks />
    nub,

    /// <remarks />
    nwc,

    /// <remarks />
    nya,

    /// <remarks />
    nym,

    /// <remarks />
    nyn,

    /// <remarks />
    nyo,

    /// <remarks />
    nzi,

    /// <remarks />
    oci,

    /// <remarks />
    oji,

    /// <remarks />
    ori,

    /// <remarks />
    orm,

    /// <remarks />
    osa,

    /// <remarks />
    oss,

    /// <remarks />
    ota,

    /// <remarks />
    oto,

    /// <remarks />
    paa,

    /// <remarks />
    pag,

    /// <remarks />
    pal,

    /// <remarks />
    pam,

    /// <remarks />
    pan,

    /// <remarks />
    pap,

    /// <remarks />
    pau,

    /// <remarks />
    peo,

    /// <remarks />
    per,

    /// <remarks />
    phi,

    /// <remarks />
    phn,

    /// <remarks />
    pli,

    /// <remarks />
    pol,

    /// <remarks />
    pon,

    /// <remarks />
    por,

    /// <remarks />
    pra,

    /// <remarks />
    pro,

    /// <remarks />
    pus,

    /// <remarks />
    [XmlEnum("qaa-qtz")]
    qaaqtz,

    /// <remarks />
    que,

    /// <remarks />
    raj,

    /// <remarks />
    rap,

    /// <remarks />
    rar,

    /// <remarks />
    roa,

    /// <remarks />
    roh,

    /// <remarks />
    rom,

    /// <remarks />
    rum,

    /// <remarks />
    run,

    /// <remarks />
    rup,

    /// <remarks />
    rus,

    /// <remarks />
    sad,

    /// <remarks />
    sag,

    /// <remarks />
    sah,

    /// <remarks />
    sai,

    /// <remarks />
    sal,

    /// <remarks />
    sam,

    /// <remarks />
    san,

    /// <remarks />
    sas,

    /// <remarks />
    sat,

    /// <remarks />
    scn,

    /// <remarks />
    sco,

    /// <remarks />
    sel,

    /// <remarks />
    sem,

    /// <remarks />
    sga,

    /// <remarks />
    sgn,

    /// <remarks />
    shn,

    /// <remarks />
    sid,

    /// <remarks />
    sin,

    /// <remarks />
    sio,

    /// <remarks />
    sit,

    /// <remarks />
    sla,

    /// <remarks />
    slo,

    /// <remarks />
    slv,

    /// <remarks />
    sma,

    /// <remarks />
    sme,

    /// <remarks />
    smi,

    /// <remarks />
    smj,

    /// <remarks />
    smn,

    /// <remarks />
    smo,

    /// <remarks />
    sms,

    /// <remarks />
    sna,

    /// <remarks />
    snd,

    /// <remarks />
    snk,

    /// <remarks />
    sog,

    /// <remarks />
    som,

    /// <remarks />
    son,

    /// <remarks />
    sot,

    /// <remarks />
    spa,

    /// <remarks />
    srd,

    /// <remarks />
    srn,

    /// <remarks />
    srp,

    /// <remarks />
    srr,

    /// <remarks />
    ssa,

    /// <remarks />
    ssw,

    /// <remarks />
    suk,

    /// <remarks />
    sun,

    /// <remarks />
    sus,

    /// <remarks />
    sux,

    /// <remarks />
    swa,

    /// <remarks />
    swe,

    /// <remarks />
    syc,

    /// <remarks />
    syr,

    /// <remarks />
    tah,

    /// <remarks />
    tai,

    /// <remarks />
    tam,

    /// <remarks />
    tat,

    /// <remarks />
    tel,

    /// <remarks />
    tem,

    /// <remarks />
    ter,

    /// <remarks />
    tet,

    /// <remarks />
    tgk,

    /// <remarks />
    tgl,

    /// <remarks />
    tha,

    /// <remarks />
    tib,

    /// <remarks />
    tig,

    /// <remarks />
    tir,

    /// <remarks />
    tiv,

    /// <remarks />
    tkl,

    /// <remarks />
    tlh,

    /// <remarks />
    tli,

    /// <remarks />
    tmh,

    /// <remarks />
    tog,

    /// <remarks />
    ton,

    /// <remarks />
    tpi,

    /// <remarks />
    tsi,

    /// <remarks />
    tsn,

    /// <remarks />
    tso,

    /// <remarks />
    tuk,

    /// <remarks />
    tum,

    /// <remarks />
    tup,

    /// <remarks />
    tur,

    /// <remarks />
    tut,

    /// <remarks />
    tvl,

    /// <remarks />
    twi,

    /// <remarks />
    tyv,

    /// <remarks />
    udm,

    /// <remarks />
    uga,

    /// <remarks />
    uig,

    /// <remarks />
    ukr,

    /// <remarks />
    umb,

    /// <remarks />
    und,

    /// <remarks />
    urd,

    /// <remarks />
    uzb,

    /// <remarks />
    vai,

    /// <remarks />
    ven,

    /// <remarks />
    vie,

    /// <remarks />
    vol,

    /// <remarks />
    vot,

    /// <remarks />
    wak,

    /// <remarks />
    wal,

    /// <remarks />
    war,

    /// <remarks />
    was,

    /// <remarks />
    wel,

    /// <remarks />
    wen,

    /// <remarks />
    wln,

    /// <remarks />
    wol,

    /// <remarks />
    xal,

    /// <remarks />
    xho,

    /// <remarks />
    yao,

    /// <remarks />
    yap,

    /// <remarks />
    yid,

    /// <remarks />
    yor,

    /// <remarks />
    ypk,

    /// <remarks />
    zap,

    /// <remarks />
    zbl,

    /// <remarks />
    zen,

    /// <remarks />
    zgh,

    /// <remarks />
    zha,

    /// <remarks />
    znd,

    /// <remarks />
    zul,

    /// <remarks />
    zun,

    /// <remarks />
    zxx,

    /// <remarks />
    zza
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class MediaScanType
{
    MediaScanTypeMediaScanElement mediaScanElementField;

    ScanType scanField;

    /// <remarks />
    public MediaScanTypeMediaScanElement MediaScanElement
    {
        get => mediaScanElementField;
        set => mediaScanElementField = value;
    }

    /// <remarks />
    public ScanType Scan
    {
        get => scanField;
        set => scanField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum MediaScanTypeMediaScanElement
{
    /// <remarks />
    up,

    /// <remarks />
    down,

    /// <remarks />
    front,

    /// <remarks />
    back,

    /// <remarks />
    left,

    /// <remarks />
    right
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class DumpHardwareType
{
    string manufacturerField;

    string modelField;

    string revisionField;

    string firmwareField;

    string serialField;

    ExtentType[] extentsField;

    SoftwareType softwareField;

    /// <remarks />
    public string Manufacturer
    {
        get => manufacturerField;
        set => manufacturerField = value;
    }

    /// <remarks />
    public string Model
    {
        get => modelField;
        set => modelField = value;
    }

    /// <remarks />
    public string Revision
    {
        get => revisionField;
        set => revisionField = value;
    }

    /// <remarks />
    public string Firmware
    {
        get => firmwareField;
        set => firmwareField = value;
    }

    /// <remarks />
    public string Serial
    {
        get => serialField;
        set => serialField = value;
    }

    /// <remarks />
    [XmlArrayItem("Extent", IsNullable = false)]
    public ExtentType[] Extents
    {
        get => extentsField;
        set => extentsField = value;
    }

    /// <remarks />
    public SoftwareType Software
    {
        get => softwareField;
        set => softwareField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ExtentType
{
    ulong startField;

    ulong endField;

    /// <remarks />
    public ulong Start
    {
        get => startField;
        set => startField = value;
    }

    /// <remarks />
    public ulong End
    {
        get => endField;
        set => endField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class SoftwareType
{
    string nameField;

    string versionField;

    string operatingSystemField;

    /// <remarks />
    public string Name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    public string Version
    {
        get => versionField;
        set => versionField = value;
    }

    /// <remarks />
    public string OperatingSystem
    {
        get => operatingSystemField;
        set => operatingSystemField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class BlockTrackType
{
    ImageType imageField;

    ulong sizeField;

    ushort headField;

    uint cylinderField;

    ulong startSectorField;

    ulong endSectorField;

    ulong sectorsField;

    uint bytesPerSectorField;

    ChecksumType[] checksumsField;

    string formatField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    public ushort Head
    {
        get => headField;
        set => headField = value;
    }

    /// <remarks />
    public uint Cylinder
    {
        get => cylinderField;
        set => cylinderField = value;
    }

    /// <remarks />
    public ulong StartSector
    {
        get => startSectorField;
        set => startSectorField = value;
    }

    /// <remarks />
    public ulong EndSector
    {
        get => endSectorField;
        set => endSectorField = value;
    }

    /// <remarks />
    public ulong Sectors
    {
        get => sectorsField;
        set => sectorsField = value;
    }

    /// <remarks />
    public uint BytesPerSector
    {
        get => bytesPerSectorField;
        set => bytesPerSectorField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    public string Format
    {
        get => formatField;
        set => formatField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class USBType
{
    ushort vendorIDField;

    ushort productIDField;

    DumpType descriptorsField;

    /// <remarks />
    public ushort VendorID
    {
        get => vendorIDField;
        set => vendorIDField = value;
    }

    /// <remarks />
    public ushort ProductID
    {
        get => productIDField;
        set => productIDField = value;
    }

    /// <remarks />
    public DumpType Descriptors
    {
        get => descriptorsField;
        set => descriptorsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class DumpType
{
    string imageField;

    ulong sizeField;

    ChecksumType[] checksumsField;

    /// <remarks />
    public string Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class EVPDType
{
    string imageField;

    ulong sizeField;

    ChecksumType[] checksumsField;

    byte pageField;

    bool pageFieldSpecified;

    /// <remarks />
    public string Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public byte page
    {
        get => pageField;
        set => pageField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool pageSpecified
    {
        get => pageFieldSpecified;
        set => pageFieldSpecified = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class SCSIType
{
    DumpType inquiryField;

    EVPDType[] eVPDField;

    DumpType modeSenseField;

    DumpType modeSense10Field;

    DumpType logSenseField;

    /// <remarks />
    public DumpType Inquiry
    {
        get => inquiryField;
        set => inquiryField = value;
    }

    /// <remarks />
    [XmlElement("EVPD")]
    public EVPDType[] EVPD
    {
        get => eVPDField;
        set => eVPDField = value;
    }

    /// <remarks />
    public DumpType ModeSense
    {
        get => modeSenseField;
        set => modeSenseField = value;
    }

    /// <remarks />
    public DumpType ModeSense10
    {
        get => modeSense10Field;
        set => modeSense10Field = value;
    }

    /// <remarks />
    public DumpType LogSense
    {
        get => logSenseField;
        set => logSenseField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class MultiMediaCardType
{
    DumpType cIDField;

    DumpType cSDField;

    DumpType extendedCSDField;

    DumpType oCRField;

    /// <remarks />
    public DumpType CID
    {
        get => cIDField;
        set => cIDField = value;
    }

    /// <remarks />
    public DumpType CSD
    {
        get => cSDField;
        set => cSDField = value;
    }

    /// <remarks />
    public DumpType ExtendedCSD
    {
        get => extendedCSDField;
        set => extendedCSDField = value;
    }

    /// <remarks />
    public DumpType OCR
    {
        get => oCRField;
        set => oCRField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class SecureDigitalType
{
    DumpType cIDField;

    DumpType cSDField;

    DumpType sCRField;

    DumpType oCRField;

    /// <remarks />
    public DumpType CID
    {
        get => cIDField;
        set => cIDField = value;
    }

    /// <remarks />
    public DumpType CSD
    {
        get => cSDField;
        set => cSDField = value;
    }

    /// <remarks />
    public DumpType SCR
    {
        get => sCRField;
        set => sCRField = value;
    }

    /// <remarks />
    public DumpType OCR
    {
        get => oCRField;
        set => oCRField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ATAType
{
    DumpType identifyField;

    /// <remarks />
    public DumpType Identify
    {
        get => identifyField;
        set => identifyField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class TapeFileType
{
    ImageType imageField;

    ulong sizeField;

    ulong sequenceField;

    ulong blockSizeField;

    ulong startBlockField;

    ulong endBlockField;

    ChecksumType[] checksumsField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    public ulong Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    public ulong BlockSize
    {
        get => blockSizeField;
        set => blockSizeField = value;
    }

    /// <remarks />
    public ulong StartBlock
    {
        get => startBlockField;
        set => startBlockField = value;
    }

    /// <remarks />
    public ulong EndBlock
    {
        get => endBlockField;
        set => endBlockField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class TapePartitionType
{
    ImageType imageField;

    ulong sizeField;

    ulong sequenceField;

    ulong startBlockField;

    ulong endBlockField;

    ChecksumType[] checksumsField;

    TapeFileType[] fileField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    public ulong Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    public ulong StartBlock
    {
        get => startBlockField;
        set => startBlockField = value;
    }

    /// <remarks />
    public ulong EndBlock
    {
        get => endBlockField;
        set => endBlockField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlElement("File")]
    public TapeFileType[] File
    {
        get => fileField;
        set => fileField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class BlockSizeType
{
    uint startingBlockField;

    uint valueField;

    /// <remarks />
    [XmlAttribute]
    public uint startingBlock
    {
        get => startingBlockField;
        set => startingBlockField = value;
    }

    /// <remarks />
    [XmlText]
    public uint Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class BlockMediaType
{
    ImageType imageField;

    ulong sizeField;

    ChecksumType[] checksumsField;

    ChecksumType[] contentChecksumsField;

    SequenceType sequenceField;

    string manufacturerField;

    string modelField;

    string serialField;

    string firmwareField;

    string interfaceField;

    string partNumberField;

    string serialNumberField;

    uint physicalBlockSizeField;

    uint logicalBlockSizeField;

    ulong logicalBlocksField;

    BlockSizeType[] variableBlockSizeField;

    TapePartitionType[] tapeInformationField;

    ScansType scansField;

    ATAType aTAField;

    PCIType pCIField;

    PCMCIAType pCMCIAField;

    SecureDigitalType secureDigitalField;

    MultiMediaCardType multiMediaCardField;

    SCSIType sCSIField;

    USBType uSBField;

    DumpType mAMField;

    ushort headsField;

    bool headsFieldSpecified;

    uint cylindersField;

    bool cylindersFieldSpecified;

    ulong sectorsPerTrackField;

    bool sectorsPerTrackFieldSpecified;

    BlockTrackType[] trackField;

    string copyProtectionField;

    DimensionsType dimensionsField;

    PartitionType[] fileSystemInformationField;

    DumpHardwareType[] dumpHardwareArrayField;

    string diskTypeField;

    string diskSubTypeField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] ContentChecksums
    {
        get => contentChecksumsField;
        set => contentChecksumsField = value;
    }

    /// <remarks />
    public SequenceType Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    public string Manufacturer
    {
        get => manufacturerField;
        set => manufacturerField = value;
    }

    /// <remarks />
    public string Model
    {
        get => modelField;
        set => modelField = value;
    }

    /// <remarks />
    public string Serial
    {
        get => serialField;
        set => serialField = value;
    }

    /// <remarks />
    public string Firmware
    {
        get => firmwareField;
        set => firmwareField = value;
    }

    /// <remarks />
    public string Interface
    {
        get => interfaceField;
        set => interfaceField = value;
    }

    /// <remarks />
    public string PartNumber
    {
        get => partNumberField;
        set => partNumberField = value;
    }

    /// <remarks />
    public string SerialNumber
    {
        get => serialNumberField;
        set => serialNumberField = value;
    }

    /// <remarks />
    public uint PhysicalBlockSize
    {
        get => physicalBlockSizeField;
        set => physicalBlockSizeField = value;
    }

    /// <remarks />
    public uint LogicalBlockSize
    {
        get => logicalBlockSizeField;
        set => logicalBlockSizeField = value;
    }

    /// <remarks />
    public ulong LogicalBlocks
    {
        get => logicalBlocksField;
        set => logicalBlocksField = value;
    }

    /// <remarks />
    [XmlArrayItem("BlockSize", IsNullable = false)]
    public BlockSizeType[] VariableBlockSize
    {
        get => variableBlockSizeField;
        set => variableBlockSizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Partition", IsNullable = false)]
    public TapePartitionType[] TapeInformation
    {
        get => tapeInformationField;
        set => tapeInformationField = value;
    }

    /// <remarks />
    public ScansType Scans
    {
        get => scansField;
        set => scansField = value;
    }

    /// <remarks />
    public ATAType ATA
    {
        get => aTAField;
        set => aTAField = value;
    }

    /// <remarks />
    public PCIType PCI
    {
        get => pCIField;
        set => pCIField = value;
    }

    /// <remarks />
    public PCMCIAType PCMCIA
    {
        get => pCMCIAField;
        set => pCMCIAField = value;
    }

    /// <remarks />
    public SecureDigitalType SecureDigital
    {
        get => secureDigitalField;
        set => secureDigitalField = value;
    }

    /// <remarks />
    public MultiMediaCardType MultiMediaCard
    {
        get => multiMediaCardField;
        set => multiMediaCardField = value;
    }

    /// <remarks />
    public SCSIType SCSI
    {
        get => sCSIField;
        set => sCSIField = value;
    }

    /// <remarks />
    public USBType USB
    {
        get => uSBField;
        set => uSBField = value;
    }

    /// <remarks />
    public DumpType MAM
    {
        get => mAMField;
        set => mAMField = value;
    }

    /// <remarks />
    public ushort Heads
    {
        get => headsField;
        set => headsField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool HeadsSpecified
    {
        get => headsFieldSpecified;
        set => headsFieldSpecified = value;
    }

    /// <remarks />
    public uint Cylinders
    {
        get => cylindersField;
        set => cylindersField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool CylindersSpecified
    {
        get => cylindersFieldSpecified;
        set => cylindersFieldSpecified = value;
    }

    /// <remarks />
    public ulong SectorsPerTrack
    {
        get => sectorsPerTrackField;
        set => sectorsPerTrackField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool SectorsPerTrackSpecified
    {
        get => sectorsPerTrackFieldSpecified;
        set => sectorsPerTrackFieldSpecified = value;
    }

    /// <remarks />
    [XmlElement("Track")]
    public BlockTrackType[] Track
    {
        get => trackField;
        set => trackField = value;
    }

    /// <remarks />
    public string CopyProtection
    {
        get => copyProtectionField;
        set => copyProtectionField = value;
    }

    /// <remarks />
    public DimensionsType Dimensions
    {
        get => dimensionsField;
        set => dimensionsField = value;
    }

    /// <remarks />
    [XmlArrayItem("Partition", IsNullable = false)]
    public PartitionType[] FileSystemInformation
    {
        get => fileSystemInformationField;
        set => fileSystemInformationField = value;
    }

    /// <remarks />
    [XmlArrayItem("DumpHardware", IsNullable = false)]
    public DumpHardwareType[] DumpHardwareArray
    {
        get => dumpHardwareArrayField;
        set => dumpHardwareArrayField = value;
    }

    /// <remarks />
    public string DiskType
    {
        get => diskTypeField;
        set => diskTypeField = value;
    }

    /// <remarks />
    public string DiskSubType
    {
        get => diskSubTypeField;
        set => diskSubTypeField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class PCIType
{
    ushort vendorIDField;

    ushort deviceIDField;

    DumpType configurationField;

    LinearMediaType expansionROMField;

    /// <remarks />
    public ushort VendorID
    {
        get => vendorIDField;
        set => vendorIDField = value;
    }

    /// <remarks />
    public ushort DeviceID
    {
        get => deviceIDField;
        set => deviceIDField = value;
    }

    /// <remarks />
    public DumpType Configuration
    {
        get => configurationField;
        set => configurationField = value;
    }

    /// <remarks />
    public LinearMediaType ExpansionROM
    {
        get => expansionROMField;
        set => expansionROMField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class LinearMediaType
{
    ImageType imageField;

    ulong sizeField;

    ChecksumType[] imageChecksumsField;

    ChecksumType[] checksumsField;

    string partNumberField;

    string serialNumberField;

    string titleField;

    uint sequenceField;

    bool sequenceFieldSpecified;

    uint imageInterleaveField;

    bool imageInterleaveFieldSpecified;

    uint interleaveField;

    bool interleaveFieldSpecified;

    string manufacturerField;

    string modelField;

    string packageField;

    string interfaceField;

    DimensionsType dimensionsField;

    ScansType scansField;

    DumpHardwareType[] dumpHardwareArrayField;

    PCMCIAType pCMCIAField;

    string copyProtectionField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] ImageChecksums
    {
        get => imageChecksumsField;
        set => imageChecksumsField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    public string PartNumber
    {
        get => partNumberField;
        set => partNumberField = value;
    }

    /// <remarks />
    public string SerialNumber
    {
        get => serialNumberField;
        set => serialNumberField = value;
    }

    /// <remarks />
    public string Title
    {
        get => titleField;
        set => titleField = value;
    }

    /// <remarks />
    public uint Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool SequenceSpecified
    {
        get => sequenceFieldSpecified;
        set => sequenceFieldSpecified = value;
    }

    /// <remarks />
    public uint ImageInterleave
    {
        get => imageInterleaveField;
        set => imageInterleaveField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool ImageInterleaveSpecified
    {
        get => imageInterleaveFieldSpecified;
        set => imageInterleaveFieldSpecified = value;
    }

    /// <remarks />
    public uint Interleave
    {
        get => interleaveField;
        set => interleaveField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool InterleaveSpecified
    {
        get => interleaveFieldSpecified;
        set => interleaveFieldSpecified = value;
    }

    /// <remarks />
    public string Manufacturer
    {
        get => manufacturerField;
        set => manufacturerField = value;
    }

    /// <remarks />
    public string Model
    {
        get => modelField;
        set => modelField = value;
    }

    /// <remarks />
    public string Package
    {
        get => packageField;
        set => packageField = value;
    }

    /// <remarks />
    public string Interface
    {
        get => interfaceField;
        set => interfaceField = value;
    }

    /// <remarks />
    public DimensionsType Dimensions
    {
        get => dimensionsField;
        set => dimensionsField = value;
    }

    /// <remarks />
    public ScansType Scans
    {
        get => scansField;
        set => scansField = value;
    }

    /// <remarks />
    [XmlArrayItem("DumpHardware", IsNullable = false)]
    public DumpHardwareType[] DumpHardwareArray
    {
        get => dumpHardwareArrayField;
        set => dumpHardwareArrayField = value;
    }

    /// <remarks />
    public PCMCIAType PCMCIA
    {
        get => pCMCIAField;
        set => pCMCIAField = value;
    }

    /// <remarks />
    public string CopyProtection
    {
        get => copyProtectionField;
        set => copyProtectionField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class PCMCIAType
{
    DumpType cISField;

    string complianceField;

    ushort manufacturerCodeField;

    bool manufacturerCodeFieldSpecified;

    ushort cardCodeField;

    bool cardCodeFieldSpecified;

    string manufacturerField;

    string productNameField;

    string[] additionalInformationField;

    /// <remarks />
    public DumpType CIS
    {
        get => cISField;
        set => cISField = value;
    }

    /// <remarks />
    public string Compliance
    {
        get => complianceField;
        set => complianceField = value;
    }

    /// <remarks />
    public ushort ManufacturerCode
    {
        get => manufacturerCodeField;
        set => manufacturerCodeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool ManufacturerCodeSpecified
    {
        get => manufacturerCodeFieldSpecified;
        set => manufacturerCodeFieldSpecified = value;
    }

    /// <remarks />
    public ushort CardCode
    {
        get => cardCodeField;
        set => cardCodeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool CardCodeSpecified
    {
        get => cardCodeFieldSpecified;
        set => cardCodeFieldSpecified = value;
    }

    /// <remarks />
    public string Manufacturer
    {
        get => manufacturerField;
        set => manufacturerField = value;
    }

    /// <remarks />
    public string ProductName
    {
        get => productNameField;
        set => productNameField = value;
    }

    /// <remarks />
    [XmlElement("AdditionalInformation")]
    public string[] AdditionalInformation
    {
        get => additionalInformationField;
        set => additionalInformationField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class PartitionType
{
    uint sequenceField;

    string nameField;

    string typeField;

    ulong startSectorField;

    ulong endSectorField;

    string descriptionField;

    FileSystemType[] fileSystemsField;

    /// <remarks />
    public uint Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    public string Name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    public string Type
    {
        get => typeField;
        set => typeField = value;
    }

    /// <remarks />
    public ulong StartSector
    {
        get => startSectorField;
        set => startSectorField = value;
    }

    /// <remarks />
    public ulong EndSector
    {
        get => endSectorField;
        set => endSectorField = value;
    }

    /// <remarks />
    public string Description
    {
        get => descriptionField;
        set => descriptionField = value;
    }

    /// <remarks />
    [XmlArrayItem("FileSystem", IsNullable = false)]
    public FileSystemType[] FileSystems
    {
        get => fileSystemsField;
        set => fileSystemsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class FileSystemType
{
    string typeField;

    DateTime creationDateField;

    bool creationDateFieldSpecified;

    DateTime modificationDateField;

    bool modificationDateFieldSpecified;

    DateTime backupDateField;

    bool backupDateFieldSpecified;

    uint clusterSizeField;

    ulong clustersField;

    ulong filesField;

    bool filesFieldSpecified;

    bool bootableField;

    string volumeSerialField;

    string volumeNameField;

    ulong freeClustersField;

    bool freeClustersFieldSpecified;

    bool dirtyField;

    DateTime expirationDateField;

    bool expirationDateFieldSpecified;

    DateTime effectiveDateField;

    bool effectiveDateFieldSpecified;

    string systemIdentifierField;

    string volumeSetIdentifierField;

    string publisherIdentifierField;

    string dataPreparerIdentifierField;

    string applicationIdentifierField;

    FilesystemContentsType contentsField;

    /// <remarks />
    public string Type
    {
        get => typeField;
        set => typeField = value;
    }

    /// <remarks />
    public DateTime CreationDate
    {
        get => creationDateField;
        set => creationDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool CreationDateSpecified
    {
        get => creationDateFieldSpecified;
        set => creationDateFieldSpecified = value;
    }

    /// <remarks />
    public DateTime ModificationDate
    {
        get => modificationDateField;
        set => modificationDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool ModificationDateSpecified
    {
        get => modificationDateFieldSpecified;
        set => modificationDateFieldSpecified = value;
    }

    /// <remarks />
    public DateTime BackupDate
    {
        get => backupDateField;
        set => backupDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool BackupDateSpecified
    {
        get => backupDateFieldSpecified;
        set => backupDateFieldSpecified = value;
    }

    /// <remarks />
    public uint ClusterSize
    {
        get => clusterSizeField;
        set => clusterSizeField = value;
    }

    /// <remarks />
    public ulong Clusters
    {
        get => clustersField;
        set => clustersField = value;
    }

    /// <remarks />
    public ulong Files
    {
        get => filesField;
        set => filesField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool FilesSpecified
    {
        get => filesFieldSpecified;
        set => filesFieldSpecified = value;
    }

    /// <remarks />
    public bool Bootable
    {
        get => bootableField;
        set => bootableField = value;
    }

    /// <remarks />
    public string VolumeSerial
    {
        get => volumeSerialField;
        set => volumeSerialField = value;
    }

    /// <remarks />
    public string VolumeName
    {
        get => volumeNameField;
        set => volumeNameField = value;
    }

    /// <remarks />
    public ulong FreeClusters
    {
        get => freeClustersField;
        set => freeClustersField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool FreeClustersSpecified
    {
        get => freeClustersFieldSpecified;
        set => freeClustersFieldSpecified = value;
    }

    /// <remarks />
    public bool Dirty
    {
        get => dirtyField;
        set => dirtyField = value;
    }

    /// <remarks />
    public DateTime ExpirationDate
    {
        get => expirationDateField;
        set => expirationDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool ExpirationDateSpecified
    {
        get => expirationDateFieldSpecified;
        set => expirationDateFieldSpecified = value;
    }

    /// <remarks />
    public DateTime EffectiveDate
    {
        get => effectiveDateField;
        set => effectiveDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool EffectiveDateSpecified
    {
        get => effectiveDateFieldSpecified;
        set => effectiveDateFieldSpecified = value;
    }

    /// <remarks />
    public string SystemIdentifier
    {
        get => systemIdentifierField;
        set => systemIdentifierField = value;
    }

    /// <remarks />
    public string VolumeSetIdentifier
    {
        get => volumeSetIdentifierField;
        set => volumeSetIdentifierField = value;
    }

    /// <remarks />
    public string PublisherIdentifier
    {
        get => publisherIdentifierField;
        set => publisherIdentifierField = value;
    }

    /// <remarks />
    public string DataPreparerIdentifier
    {
        get => dataPreparerIdentifierField;
        set => dataPreparerIdentifierField = value;
    }

    /// <remarks />
    public string ApplicationIdentifier
    {
        get => applicationIdentifierField;
        set => applicationIdentifierField = value;
    }

    /// <remarks />
    public FilesystemContentsType Contents
    {
        get => contentsField;
        set => contentsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class FilesystemContentsType
{
    ContentsFileType[] fileField;

    DirectoryType[] directoryField;

    string namespaceField;

    /// <remarks />
    [XmlElement("File")]
    public ContentsFileType[] File
    {
        get => fileField;
        set => fileField = value;
    }

    /// <remarks />
    [XmlElement("Directory")]
    public DirectoryType[] Directory
    {
        get => directoryField;
        set => directoryField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string @namespace
    {
        get => namespaceField;
        set => namespaceField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ContentsFileType
{
    ChecksumType[] checksumsField;

    ExtendedAttributeType[] extendedAttributesField;

    string nameField;

    DateTime creationTimeField;

    bool creationTimeFieldSpecified;

    DateTime accessTimeField;

    bool accessTimeFieldSpecified;

    DateTime statusChangeTimeField;

    bool statusChangeTimeFieldSpecified;

    DateTime backupTimeField;

    bool backupTimeFieldSpecified;

    DateTime lastWriteTimeField;

    bool lastWriteTimeFieldSpecified;

    ulong attributesField;

    uint posixModeField;

    bool posixModeFieldSpecified;

    ulong deviceNumberField;

    bool deviceNumberFieldSpecified;

    ulong posixGroupIdField;

    bool posixGroupIdFieldSpecified;

    ulong inodeField;

    ulong linksField;

    ulong posixUserIdField;

    bool posixUserIdFieldSpecified;

    ulong lengthField;

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlArrayItem("ExtendedAttribute", IsNullable = false)]
    public ExtendedAttributeType[] ExtendedAttributes
    {
        get => extendedAttributesField;
        set => extendedAttributesField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime creationTime
    {
        get => creationTimeField;
        set => creationTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool creationTimeSpecified
    {
        get => creationTimeFieldSpecified;
        set => creationTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime accessTime
    {
        get => accessTimeField;
        set => accessTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool accessTimeSpecified
    {
        get => accessTimeFieldSpecified;
        set => accessTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime statusChangeTime
    {
        get => statusChangeTimeField;
        set => statusChangeTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool statusChangeTimeSpecified
    {
        get => statusChangeTimeFieldSpecified;
        set => statusChangeTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime backupTime
    {
        get => backupTimeField;
        set => backupTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool backupTimeSpecified
    {
        get => backupTimeFieldSpecified;
        set => backupTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime lastWriteTime
    {
        get => lastWriteTimeField;
        set => lastWriteTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool lastWriteTimeSpecified
    {
        get => lastWriteTimeFieldSpecified;
        set => lastWriteTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong attributes
    {
        get => attributesField;
        set => attributesField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint posixMode
    {
        get => posixModeField;
        set => posixModeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool posixModeSpecified
    {
        get => posixModeFieldSpecified;
        set => posixModeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong deviceNumber
    {
        get => deviceNumberField;
        set => deviceNumberField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool deviceNumberSpecified
    {
        get => deviceNumberFieldSpecified;
        set => deviceNumberFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong posixGroupId
    {
        get => posixGroupIdField;
        set => posixGroupIdField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool posixGroupIdSpecified
    {
        get => posixGroupIdFieldSpecified;
        set => posixGroupIdFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong inode
    {
        get => inodeField;
        set => inodeField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong links
    {
        get => linksField;
        set => linksField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong posixUserId
    {
        get => posixUserIdField;
        set => posixUserIdField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool posixUserIdSpecified
    {
        get => posixUserIdFieldSpecified;
        set => posixUserIdFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong length
    {
        get => lengthField;
        set => lengthField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class ExtendedAttributeType
{
    ChecksumType[] checksumsField;

    string nameField;

    ulong lengthField;

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong length
    {
        get => lengthField;
        set => lengthField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class DirectoryType
{
    ContentsFileType[] fileField;

    DirectoryType[] directoryField;

    string nameField;

    DateTime creationTimeField;

    bool creationTimeFieldSpecified;

    DateTime accessTimeField;

    bool accessTimeFieldSpecified;

    DateTime statusChangeTimeField;

    bool statusChangeTimeFieldSpecified;

    DateTime backupTimeField;

    bool backupTimeFieldSpecified;

    DateTime lastWriteTimeField;

    bool lastWriteTimeFieldSpecified;

    ulong attributesField;

    uint posixModeField;

    bool posixModeFieldSpecified;

    ulong deviceNumberField;

    bool deviceNumberFieldSpecified;

    ulong posixGroupIdField;

    bool posixGroupIdFieldSpecified;

    ulong inodeField;

    bool inodeFieldSpecified;

    ulong linksField;

    bool linksFieldSpecified;

    ulong posixUserIdField;

    bool posixUserIdFieldSpecified;

    /// <remarks />
    [XmlElement("File")]
    public ContentsFileType[] File
    {
        get => fileField;
        set => fileField = value;
    }

    /// <remarks />
    [XmlElement("Directory")]
    public DirectoryType[] Directory
    {
        get => directoryField;
        set => directoryField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime creationTime
    {
        get => creationTimeField;
        set => creationTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool creationTimeSpecified
    {
        get => creationTimeFieldSpecified;
        set => creationTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime accessTime
    {
        get => accessTimeField;
        set => accessTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool accessTimeSpecified
    {
        get => accessTimeFieldSpecified;
        set => accessTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime statusChangeTime
    {
        get => statusChangeTimeField;
        set => statusChangeTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool statusChangeTimeSpecified
    {
        get => statusChangeTimeFieldSpecified;
        set => statusChangeTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime backupTime
    {
        get => backupTimeField;
        set => backupTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool backupTimeSpecified
    {
        get => backupTimeFieldSpecified;
        set => backupTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public DateTime lastWriteTime
    {
        get => lastWriteTimeField;
        set => lastWriteTimeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool lastWriteTimeSpecified
    {
        get => lastWriteTimeFieldSpecified;
        set => lastWriteTimeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong attributes
    {
        get => attributesField;
        set => attributesField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint posixMode
    {
        get => posixModeField;
        set => posixModeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool posixModeSpecified
    {
        get => posixModeFieldSpecified;
        set => posixModeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong deviceNumber
    {
        get => deviceNumberField;
        set => deviceNumberField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool deviceNumberSpecified
    {
        get => deviceNumberFieldSpecified;
        set => deviceNumberFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong posixGroupId
    {
        get => posixGroupIdField;
        set => posixGroupIdField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool posixGroupIdSpecified
    {
        get => posixGroupIdFieldSpecified;
        set => posixGroupIdFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong inode
    {
        get => inodeField;
        set => inodeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool inodeSpecified
    {
        get => inodeFieldSpecified;
        set => inodeFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong links
    {
        get => linksField;
        set => linksField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool linksSpecified
    {
        get => linksFieldSpecified;
        set => linksFieldSpecified = value;
    }

    /// <remarks />
    [XmlAttribute]
    public ulong posixUserId
    {
        get => posixUserIdField;
        set => posixUserIdField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool posixUserIdSpecified
    {
        get => posixUserIdFieldSpecified;
        set => posixUserIdFieldSpecified = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class CoordinatesType
{
    double latitudeField;

    double longitudeField;

    /// <remarks />
    public double Latitude
    {
        get => latitudeField;
        set => latitudeField = value;
    }

    /// <remarks />
    public double Longitude
    {
        get => longitudeField;
        set => longitudeField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class RecordingType
{
    string broadcasterField;

    string broadcastPlatformField;

    RecordingTypeSourceFormat sourceFormatField;

    DateTime timestampField;

    SoftwareType[] softwareField;

    CoordinatesType coordinatesField;

    /// <remarks />
    public string Broadcaster
    {
        get => broadcasterField;
        set => broadcasterField = value;
    }

    /// <remarks />
    public string BroadcastPlatform
    {
        get => broadcastPlatformField;
        set => broadcastPlatformField = value;
    }

    /// <remarks />
    public RecordingTypeSourceFormat SourceFormat
    {
        get => sourceFormatField;
        set => sourceFormatField = value;
    }

    /// <remarks />
    public DateTime Timestamp
    {
        get => timestampField;
        set => timestampField = value;
    }

    /// <remarks />
    [XmlElement("Software")]
    public SoftwareType[] Software
    {
        get => softwareField;
        set => softwareField = value;
    }

    /// <remarks />
    public CoordinatesType Coordinates
    {
        get => coordinatesField;
        set => coordinatesField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum RecordingTypeSourceFormat
{
    /// <remarks />
    [XmlEnum("ITU-A")]
    ITUA,

    /// <remarks />
    [XmlEnum("ITU-B")]
    ITUB,

    /// <remarks />
    [XmlEnum("ITU-C")]
    ITUC,

    /// <remarks />
    [XmlEnum("ITU-D")]
    ITUD,

    /// <remarks />
    [XmlEnum("ITU-E")]
    ITUE,

    /// <remarks />
    [XmlEnum("ITU-F")]
    ITUF,

    /// <remarks />
    [XmlEnum("ITU-G")]
    ITUG,

    /// <remarks />
    [XmlEnum("ITU-H")]
    ITUH,

    /// <remarks />
    [XmlEnum("ITU-I")]
    ITUI,

    /// <remarks />
    [XmlEnum("ITU-J")]
    ITUJ,

    /// <remarks />
    [XmlEnum("ITU-K")]
    ITUK,

    /// <remarks />
    [XmlEnum("ITU-L")]
    ITUL,

    /// <remarks />
    [XmlEnum("ITU-M")]
    ITUM,

    /// <remarks />
    [XmlEnum("ITU-N")]
    ITUN,

    /// <remarks />
    [XmlEnum("PAL-B")]
    PALB,

    /// <remarks />
    [XmlEnum("SECAM-B")]
    SECAMB,

    /// <remarks />
    [XmlEnum("PAL-D")]
    PALD,

    /// <remarks />
    [XmlEnum("SECAM-D")]
    SECAMD,

    /// <remarks />
    [XmlEnum("PAL-G")]
    PALG,

    /// <remarks />
    [XmlEnum("SECAM-G")]
    SECAMG,

    /// <remarks />
    [XmlEnum("PAL-H")]
    PALH,

    /// <remarks />
    [XmlEnum("PAL-I")]
    PALI,

    /// <remarks />
    [XmlEnum("PAL-K")]
    PALK,

    /// <remarks />
    [XmlEnum("SECAM-K")]
    SECAMK,

    /// <remarks />
    [XmlEnum("NTSC-M")]
    NTSCM,

    /// <remarks />
    [XmlEnum("PAL-N")]
    PALN,

    /// <remarks />
    [XmlEnum("PAL-M")]
    PALM,

    /// <remarks />
    [XmlEnum("SECAM-M")]
    SECAMM,

    /// <remarks />
    MUSE,

    /// <remarks />
    PALplus,

    /// <remarks />
    FM,

    /// <remarks />
    AM,

    /// <remarks />
    COFDM,

    /// <remarks />
    [XmlEnum("CAM-D")]
    CAMD,

    /// <remarks />
    DAB,

    /// <remarks />
    [XmlEnum("DAB+")]
    DAB1,

    /// <remarks />
    DRM,

    /// <remarks />
    [XmlEnum("DRM+")]
    DRM1,

    /// <remarks />
    FMeXtra,

    /// <remarks />
    ATSC,

    /// <remarks />
    ATSC2,

    /// <remarks />
    ATSC3,

    /// <remarks />
    [XmlEnum("ATSC-M/H")]
    ATSCMH,

    /// <remarks />
    [XmlEnum("DVB-T")]
    DVBT,

    /// <remarks />
    [XmlEnum("DVB-T2")]
    DVBT2,

    /// <remarks />
    [XmlEnum("DVB-S")]
    DVBS,

    /// <remarks />
    [XmlEnum("DVB-S2")]
    DVBS2,

    /// <remarks />
    [XmlEnum("DVB-S2X")]
    DVBS2X,

    /// <remarks />
    [XmlEnum("DVB-C")]
    DVBC,

    /// <remarks />
    [XmlEnum("DVB-C2")]
    DVBC2,

    /// <remarks />
    [XmlEnum("DVB-H")]
    DVBH,

    /// <remarks />
    [XmlEnum("DVB-NGH")]
    DVBNGH,

    /// <remarks />
    [XmlEnum("DVB-SH")]
    DVBSH,

    /// <remarks />
    [XmlEnum("ISDB-T")]
    ISDBT,

    /// <remarks />
    [XmlEnum("ISDB-Tb")]
    ISDBTb,

    /// <remarks />
    [XmlEnum("ISDB-S")]
    ISDBS,

    /// <remarks />
    [XmlEnum("ISDB-C")]
    ISDBC,

    /// <remarks />
    [XmlEnum("1seg")]
    Item1seg,

    /// <remarks />
    DTMB,

    /// <remarks />
    CCMB,

    /// <remarks />
    [XmlEnum("T-DMB")]
    TDMB,

    /// <remarks />
    [XmlEnum("S-DMB")]
    SDMB,

    /// <remarks />
    IPTV,

    /// <remarks />
    [XmlEnum("DVB-MT")]
    DVBMT,

    /// <remarks />
    [XmlEnum("DVB-MC")]
    DVBMC,

    /// <remarks />
    [XmlEnum("DVB-MS")]
    DVBMS,

    /// <remarks />
    ADR,

    /// <remarks />
    SDR
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class SubtitleTracksType
{
    LanguagesTypeLanguage[] languagesField;

    uint trackNumberField;

    string codecField;

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Languages
    {
        get => languagesField;
        set => languagesField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint TrackNumber
    {
        get => trackNumberField;
        set => trackNumberField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string Codec
    {
        get => codecField;
        set => codecField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class VideoTracksType
{
    LanguagesTypeLanguage[] languagesField;

    uint trackNumberField;

    string codecField;

    uint horizontalField;

    uint verticalField;

    long meanBitrateField;

    bool threeDField;

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Languages
    {
        get => languagesField;
        set => languagesField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint TrackNumber
    {
        get => trackNumberField;
        set => trackNumberField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string Codec
    {
        get => codecField;
        set => codecField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint Horizontal
    {
        get => horizontalField;
        set => horizontalField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint Vertical
    {
        get => verticalField;
        set => verticalField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public long MeanBitrate
    {
        get => meanBitrateField;
        set => meanBitrateField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public bool ThreeD
    {
        get => threeDField;
        set => threeDField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class AudioTracksType
{
    LanguagesTypeLanguage[] languagesField;

    uint trackNumberField;

    string accoustIDField;

    string codecField;

    uint channelsField;

    double sampleRateField;

    long meanBitrateField;

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Languages
    {
        get => languagesField;
        set => languagesField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint TrackNumber
    {
        get => trackNumberField;
        set => trackNumberField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string AccoustID
    {
        get => accoustIDField;
        set => accoustIDField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public string Codec
    {
        get => codecField;
        set => codecField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint Channels
    {
        get => channelsField;
        set => channelsField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public double SampleRate
    {
        get => sampleRateField;
        set => sampleRateField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public long MeanBitrate
    {
        get => meanBitrateField;
        set => meanBitrateField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class AdvertisementType
{
    string manufacturerField;

    string productField;

    FileType fileField;

    ulong fileSizeField;

    ulong framesField;

    bool framesFieldSpecified;

    double durationField;

    float meanFrameRateField;

    bool meanFrameRateFieldSpecified;

    ChecksumType[] checksumsField;

    AudioTracksType[] audioTrackField;

    VideoTracksType[] videoTrackField;

    SubtitleTracksType[] subtitleTrackField;

    RecordingType recordingField;

    /// <remarks />
    public string Manufacturer
    {
        get => manufacturerField;
        set => manufacturerField = value;
    }

    /// <remarks />
    public string Product
    {
        get => productField;
        set => productField = value;
    }

    /// <remarks />
    public FileType File
    {
        get => fileField;
        set => fileField = value;
    }

    /// <remarks />
    public ulong FileSize
    {
        get => fileSizeField;
        set => fileSizeField = value;
    }

    /// <remarks />
    public ulong Frames
    {
        get => framesField;
        set => framesField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool FramesSpecified
    {
        get => framesFieldSpecified;
        set => framesFieldSpecified = value;
    }

    /// <remarks />
    public double Duration
    {
        get => durationField;
        set => durationField = value;
    }

    /// <remarks />
    public float MeanFrameRate
    {
        get => meanFrameRateField;
        set => meanFrameRateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool MeanFrameRateSpecified
    {
        get => meanFrameRateFieldSpecified;
        set => meanFrameRateFieldSpecified = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlElement("AudioTrack")]
    public AudioTracksType[] AudioTrack
    {
        get => audioTrackField;
        set => audioTrackField = value;
    }

    /// <remarks />
    [XmlElement("VideoTrack")]
    public VideoTracksType[] VideoTrack
    {
        get => videoTrackField;
        set => videoTrackField = value;
    }

    /// <remarks />
    [XmlElement("SubtitleTrack")]
    public SubtitleTracksType[] SubtitleTrack
    {
        get => subtitleTrackField;
        set => subtitleTrackField = value;
    }

    /// <remarks />
    public RecordingType Recording
    {
        get => recordingField;
        set => recordingField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class SubChannelType
{
    ImageType imageField;

    ulong sizeField;

    ChecksumType[] checksumsField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class TrackFlagsType
{
    bool quadraphonicField;

    bool dataField;

    bool copyPermittedField;

    bool preEmphasisField;

    /// <remarks />
    public bool Quadraphonic
    {
        get => quadraphonicField;
        set => quadraphonicField = value;
    }

    /// <remarks />
    public bool Data
    {
        get => dataField;
        set => dataField = value;
    }

    /// <remarks />
    public bool CopyPermitted
    {
        get => copyPermittedField;
        set => copyPermittedField = value;
    }

    /// <remarks />
    public bool PreEmphasis
    {
        get => preEmphasisField;
        set => preEmphasisField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class TrackIndexType
{
    ushort indexField;

    int valueField;

    /// <remarks />
    [XmlAttribute]
    public ushort index
    {
        get => indexField;
        set => indexField = value;
    }

    /// <remarks />
    [XmlText]
    public int Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class TrackSequenceType
{
    uint trackNumberField;

    uint sessionField;

    /// <remarks />
    public uint TrackNumber
    {
        get => trackNumberField;
        set => trackNumberField = value;
    }

    /// <remarks />
    public uint Session
    {
        get => sessionField;
        set => sessionField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class TrackType
{
    ImageType imageField;

    ulong sizeField;

    TrackSequenceType sequenceField;

    string startMSFField;

    string endMSFField;

    ulong startSectorField;

    ulong endSectorField;

    TrackIndexType[] indexesField;

    TrackFlagsType flagsField;

    string iSRCField;

    TrackTypeTrackType trackType1Field;

    uint bytesPerSectorField;

    string accoustIDField;

    ChecksumType[] checksumsField;

    SubChannelType subChannelField;

    PartitionType[] fileSystemInformationField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    public TrackSequenceType Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    public string StartMSF
    {
        get => startMSFField;
        set => startMSFField = value;
    }

    /// <remarks />
    public string EndMSF
    {
        get => endMSFField;
        set => endMSFField = value;
    }

    /// <remarks />
    public ulong StartSector
    {
        get => startSectorField;
        set => startSectorField = value;
    }

    /// <remarks />
    public ulong EndSector
    {
        get => endSectorField;
        set => endSectorField = value;
    }

    /// <remarks />
    [XmlArrayItem("Index", IsNullable = false)]
    public TrackIndexType[] Indexes
    {
        get => indexesField;
        set => indexesField = value;
    }

    /// <remarks />
    public TrackFlagsType Flags
    {
        get => flagsField;
        set => flagsField = value;
    }

    /// <remarks />
    public string ISRC
    {
        get => iSRCField;
        set => iSRCField = value;
    }

    /// <remarks />
    [XmlElement("TrackType")]
    public TrackTypeTrackType TrackType1
    {
        get => trackType1Field;
        set => trackType1Field = value;
    }

    /// <remarks />
    public uint BytesPerSector
    {
        get => bytesPerSectorField;
        set => bytesPerSectorField = value;
    }

    /// <remarks />
    public string AccoustID
    {
        get => accoustIDField;
        set => accoustIDField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    public SubChannelType SubChannel
    {
        get => subChannelField;
        set => subChannelField = value;
    }

    /// <remarks />
    [XmlArrayItem("Partition", IsNullable = false)]
    public PartitionType[] FileSystemInformation
    {
        get => fileSystemInformationField;
        set => fileSystemInformationField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum TrackTypeTrackType
{
    /// <remarks />
    audio,

    /// <remarks />
    mode0,

    /// <remarks />
    mode1,

    /// <remarks />
    mode2,

    /// <remarks />
    m2f1,

    /// <remarks />
    m2f2,

    /// <remarks />
    dvd,

    /// <remarks />
    hddvd,

    /// <remarks />
    bluray,

    /// <remarks />
    ddcd
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class PS3EncryptionType
{
    string keyField;

    string serialField;

    /// <remarks />
    public string Key
    {
        get => keyField;
        set => keyField = value;
    }

    /// <remarks />
    public string Serial
    {
        get => serialField;
        set => serialField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class XboxSecuritySectorsType
{
    uint requestVersionField;

    uint requestNumberField;

    DumpType securitySectorsField;

    /// <remarks />
    public uint RequestVersion
    {
        get => requestVersionField;
        set => requestVersionField = value;
    }

    /// <remarks />
    public uint RequestNumber
    {
        get => requestNumberField;
        set => requestNumberField = value;
    }

    /// <remarks />
    public DumpType SecuritySectors
    {
        get => securitySectorsField;
        set => securitySectorsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class XboxType
{
    DumpType pFIField;

    DumpType dMIField;

    XboxSecuritySectorsType[] securitySectorsField;

    /// <remarks />
    public DumpType PFI
    {
        get => pFIField;
        set => pFIField = value;
    }

    /// <remarks />
    public DumpType DMI
    {
        get => dMIField;
        set => dMIField = value;
    }

    /// <remarks />
    [XmlElement("SecuritySectors")]
    public XboxSecuritySectorsType[] SecuritySectors
    {
        get => securitySectorsField;
        set => securitySectorsField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class BorderType
{
    string imageField;

    ulong sizeField;

    ChecksumType[] checksumsField;

    uint sessionField;

    bool sessionFieldSpecified;

    /// <remarks />
    public string Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public uint session
    {
        get => sessionField;
        set => sessionField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool sessionSpecified
    {
        get => sessionFieldSpecified;
        set => sessionFieldSpecified = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class CaseType
{
    CaseTypeCaseType caseType1Field;

    ScansType scansField;

    /// <remarks />
    [XmlElement("CaseType")]
    public CaseTypeCaseType CaseType1
    {
        get => caseType1Field;
        set => caseType1Field = value;
    }

    /// <remarks />
    public ScansType Scans
    {
        get => scansField;
        set => scansField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum CaseTypeCaseType
{
    /// <remarks />
    jewel,

    /// <remarks />
    bigjewel,

    /// <remarks />
    slimjewel,

    /// <remarks />
    sleeve,

    /// <remarks />
    qpack,

    /// <remarks />
    digisleeve,

    /// <remarks />
    discboxslider,

    /// <remarks />
    compacplus,

    /// <remarks />
    keepcase,

    /// <remarks />
    snapcase,

    /// <remarks />
    softcase,

    /// <remarks />
    ecopack,

    /// <remarks />
    liftlock,

    /// <remarks />
    spindle,

    /// <remarks />
    ps2case,

    /// <remarks />
    ps3case,

    /// <remarks />
    bluraykeepcase,

    /// <remarks />
    pscase,

    /// <remarks />
    dccase,

    /// <remarks />
    saturncase,

    /// <remarks />
    xboxcase,

    /// <remarks />
    xbox360case,

    /// <remarks />
    xboxonecase,

    /// <remarks />
    saturnbigcase,

    /// <remarks />
    gccase,

    /// <remarks />
    wiicase,

    /// <remarks />
    unknown
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class LayeredTextType
{
    uint layerField;

    bool layerFieldSpecified;

    string valueField;

    /// <remarks />
    [XmlAttribute]
    public uint layer
    {
        get => layerField;
        set => layerField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool layerSpecified
    {
        get => layerFieldSpecified;
        set => layerFieldSpecified = value;
    }

    /// <remarks />
    [XmlText]
    public string Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class SectorsType
{
    uint layerField;

    bool layerFieldSpecified;

    ulong valueField;

    /// <remarks />
    [XmlAttribute]
    public uint layer
    {
        get => layerField;
        set => layerField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool layerSpecified
    {
        get => layerFieldSpecified;
        set => layerFieldSpecified = value;
    }

    /// <remarks />
    [XmlText]
    public ulong Value
    {
        get => valueField;
        set => valueField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class LayersType
{
    SectorsType[] sectorsField;

    LayersTypeType typeField;

    bool typeFieldSpecified;

    /// <remarks />
    [XmlElement("Sectors")]
    public SectorsType[] Sectors
    {
        get => sectorsField;
        set => sectorsField = value;
    }

    /// <remarks />
    [XmlAttribute]
    public LayersTypeType type
    {
        get => typeField;
        set => typeField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool typeSpecified
    {
        get => typeFieldSpecified;
        set => typeFieldSpecified = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum LayersTypeType
{
    /// <remarks />
    PTP,

    /// <remarks />
    OTP
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class OpticalDiscType
{
    ImageType imageField;

    ulong sizeField;

    SequenceType sequenceField;

    LayersType layersField;

    ChecksumType[] checksumsField;

    string partNumberField;

    string serialNumberField;

    LayeredTextType[] ringCodeField;

    LayeredTextType[] masteringSIDField;

    LayeredTextType[] toolstampField;

    LayeredTextType[] mouldSIDField;

    LayeredTextType[] mouldTextField;

    string discTypeField;

    string discSubTypeField;

    int offsetField;

    bool offsetFieldSpecified;

    uint[] tracksField;

    uint sessionsField;

    string copyProtectionField;

    DimensionsType dimensionsField;

    CaseType caseField;

    ScansType scansField;

    DumpType pFIField;

    DumpType dMIField;

    DumpType cMIField;

    DumpType bCAField;

    DumpType aTIPField;

    DumpType aDIPField;

    DumpType pMAField;

    DumpType dDSField;

    DumpType sAIField;

    DumpType lastRMDField;

    DumpType pRIField;

    DumpType mediaIDField;

    DumpType pFIRField;

    DumpType dCBField;

    DumpType diField;

    DumpType pACField;

    DumpType tOCField;

    DumpType leadInCdTextField;

    BorderType[] firstTrackPregrapField;

    BorderType[] leadInField;

    BorderType[] leadOutField;

    XboxType xboxField;

    PS3EncryptionType pS3EncryptionField;

    string mediaCatalogueNumberField;

    TrackType[] trackField;

    DumpHardwareType[] dumpHardwareArrayField;

    /// <remarks />
    public ImageType Image
    {
        get => imageField;
        set => imageField = value;
    }

    /// <remarks />
    public ulong Size
    {
        get => sizeField;
        set => sizeField = value;
    }

    /// <remarks />
    public SequenceType Sequence
    {
        get => sequenceField;
        set => sequenceField = value;
    }

    /// <remarks />
    public LayersType Layers
    {
        get => layersField;
        set => layersField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    public string PartNumber
    {
        get => partNumberField;
        set => partNumberField = value;
    }

    /// <remarks />
    public string SerialNumber
    {
        get => serialNumberField;
        set => serialNumberField = value;
    }

    /// <remarks />
    [XmlElement("RingCode")]
    public LayeredTextType[] RingCode
    {
        get => ringCodeField;
        set => ringCodeField = value;
    }

    /// <remarks />
    [XmlElement("MasteringSID")]
    public LayeredTextType[] MasteringSID
    {
        get => masteringSIDField;
        set => masteringSIDField = value;
    }

    /// <remarks />
    [XmlElement("Toolstamp")]
    public LayeredTextType[] Toolstamp
    {
        get => toolstampField;
        set => toolstampField = value;
    }

    /// <remarks />
    [XmlElement("MouldSID")]
    public LayeredTextType[] MouldSID
    {
        get => mouldSIDField;
        set => mouldSIDField = value;
    }

    /// <remarks />
    [XmlElement("MouldText")]
    public LayeredTextType[] MouldText
    {
        get => mouldTextField;
        set => mouldTextField = value;
    }

    /// <remarks />
    public string DiscType
    {
        get => discTypeField;
        set => discTypeField = value;
    }

    /// <remarks />
    public string DiscSubType
    {
        get => discSubTypeField;
        set => discSubTypeField = value;
    }

    /// <remarks />
    public int Offset
    {
        get => offsetField;
        set => offsetField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool OffsetSpecified
    {
        get => offsetFieldSpecified;
        set => offsetFieldSpecified = value;
    }

    /// <remarks />
    [XmlElement("Tracks")]
    public uint[] Tracks
    {
        get => tracksField;
        set => tracksField = value;
    }

    /// <remarks />
    public uint Sessions
    {
        get => sessionsField;
        set => sessionsField = value;
    }

    /// <remarks />
    public string CopyProtection
    {
        get => copyProtectionField;
        set => copyProtectionField = value;
    }

    /// <remarks />
    public DimensionsType Dimensions
    {
        get => dimensionsField;
        set => dimensionsField = value;
    }

    /// <remarks />
    public CaseType Case
    {
        get => caseField;
        set => caseField = value;
    }

    /// <remarks />
    public ScansType Scans
    {
        get => scansField;
        set => scansField = value;
    }

    /// <remarks />
    public DumpType PFI
    {
        get => pFIField;
        set => pFIField = value;
    }

    /// <remarks />
    public DumpType DMI
    {
        get => dMIField;
        set => dMIField = value;
    }

    /// <remarks />
    public DumpType CMI
    {
        get => cMIField;
        set => cMIField = value;
    }

    /// <remarks />
    public DumpType BCA
    {
        get => bCAField;
        set => bCAField = value;
    }

    /// <remarks />
    public DumpType ATIP
    {
        get => aTIPField;
        set => aTIPField = value;
    }

    /// <remarks />
    public DumpType ADIP
    {
        get => aDIPField;
        set => aDIPField = value;
    }

    /// <remarks />
    public DumpType PMA
    {
        get => pMAField;
        set => pMAField = value;
    }

    /// <remarks />
    public DumpType DDS
    {
        get => dDSField;
        set => dDSField = value;
    }

    /// <remarks />
    public DumpType SAI
    {
        get => sAIField;
        set => sAIField = value;
    }

    /// <remarks />
    public DumpType LastRMD
    {
        get => lastRMDField;
        set => lastRMDField = value;
    }

    /// <remarks />
    public DumpType PRI
    {
        get => pRIField;
        set => pRIField = value;
    }

    /// <remarks />
    public DumpType MediaID
    {
        get => mediaIDField;
        set => mediaIDField = value;
    }

    /// <remarks />
    public DumpType PFIR
    {
        get => pFIRField;
        set => pFIRField = value;
    }

    /// <remarks />
    public DumpType DCB
    {
        get => dCBField;
        set => dCBField = value;
    }

    /// <remarks />
    public DumpType DI
    {
        get => diField;
        set => diField = value;
    }

    /// <remarks />
    public DumpType PAC
    {
        get => pACField;
        set => pACField = value;
    }

    /// <remarks />
    public DumpType TOC
    {
        get => tOCField;
        set => tOCField = value;
    }

    /// <remarks />
    public DumpType LeadInCdText
    {
        get => leadInCdTextField;
        set => leadInCdTextField = value;
    }

    /// <remarks />
    [XmlElement("FirstTrackPregrap")]
    public BorderType[] FirstTrackPregrap
    {
        get => firstTrackPregrapField;
        set => firstTrackPregrapField = value;
    }

    /// <remarks />
    [XmlElement("LeadIn")]
    public BorderType[] LeadIn
    {
        get => leadInField;
        set => leadInField = value;
    }

    /// <remarks />
    [XmlElement("LeadOut")]
    public BorderType[] LeadOut
    {
        get => leadOutField;
        set => leadOutField = value;
    }

    /// <remarks />
    public XboxType Xbox
    {
        get => xboxField;
        set => xboxField = value;
    }

    /// <remarks />
    public PS3EncryptionType PS3Encryption
    {
        get => pS3EncryptionField;
        set => pS3EncryptionField = value;
    }

    /// <remarks />
    public string MediaCatalogueNumber
    {
        get => mediaCatalogueNumberField;
        set => mediaCatalogueNumberField = value;
    }

    /// <remarks />
    [XmlElement("Track")]
    public TrackType[] Track
    {
        get => trackField;
        set => trackField = value;
    }

    /// <remarks />
    [XmlArrayItem("DumpHardware", IsNullable = false)]
    public DumpHardwareType[] DumpHardwareArray
    {
        get => dumpHardwareArrayField;
        set => dumpHardwareArrayField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class UserManualType
{
    LanguagesTypeLanguage[] languageField;

    uint pagesField;

    string pageSizeField;

    ScanType scanField;

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Language
    {
        get => languageField;
        set => languageField = value;
    }

    /// <remarks />
    public uint Pages
    {
        get => pagesField;
        set => pagesField = value;
    }

    /// <remarks />
    public string PageSize
    {
        get => pageSizeField;
        set => pageSizeField = value;
    }

    /// <remarks />
    public ScanType Scan
    {
        get => scanField;
        set => scanField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class RequiredOperatingSystemType
{
    string nameField;

    string[] versionField;

    /// <remarks />
    public string Name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    [XmlElement("Version")]
    public string[] Version
    {
        get => versionField;
        set => versionField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class BookType
{
    BarcodeType[] barcodesField;

    CoverType coverField;

    string nameField;

    string editorialField;

    string authorField;

    DateTime publicationDateField;

    bool publicationDateFieldSpecified;

    LanguagesTypeLanguage[] languageField;

    uint pagesField;

    bool pagesFieldSpecified;

    string pageSizeField;

    ScanType scanField;

    /// <remarks />
    [XmlArrayItem("Barcode", IsNullable = false)]
    public BarcodeType[] Barcodes
    {
        get => barcodesField;
        set => barcodesField = value;
    }

    /// <remarks />
    public CoverType Cover
    {
        get => coverField;
        set => coverField = value;
    }

    /// <remarks />
    public string Name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    public string Editorial
    {
        get => editorialField;
        set => editorialField = value;
    }

    /// <remarks />
    public string Author
    {
        get => authorField;
        set => authorField = value;
    }

    /// <remarks />
    [XmlElement(DataType = "date")]
    public DateTime PublicationDate
    {
        get => publicationDateField;
        set => publicationDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool PublicationDateSpecified
    {
        get => publicationDateFieldSpecified;
        set => publicationDateFieldSpecified = value;
    }

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Language
    {
        get => languageField;
        set => languageField = value;
    }

    /// <remarks />
    public uint Pages
    {
        get => pagesField;
        set => pagesField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool PagesSpecified
    {
        get => pagesFieldSpecified;
        set => pagesFieldSpecified = value;
    }

    /// <remarks />
    public string PageSize
    {
        get => pageSizeField;
        set => pageSizeField = value;
    }

    /// <remarks />
    public ScanType Scan
    {
        get => scanField;
        set => scanField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class CoverType
{
    FileType fileField;

    ChecksumType[] checksumsField;

    byte[] thumbnailField;

    /// <remarks />
    public FileType File
    {
        get => fileField;
        set => fileField = value;
    }

    /// <remarks />
    [XmlArrayItem("Checksum", IsNullable = false)]
    public ChecksumType[] Checksums
    {
        get => checksumsField;
        set => checksumsField = value;
    }

    /// <remarks />
    [XmlElement(DataType = "base64Binary")]
    public byte[] Thumbnail
    {
        get => thumbnailField;
        set => thumbnailField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, DebuggerStepThrough, DesignerCategory("code")]
public class MagazineType
{
    BarcodeType[] barcodesField;

    CoverType coverField;

    string nameField;

    string editorialField;

    DateTime publicationDateField;

    bool publicationDateFieldSpecified;

    uint numberField;

    bool numberFieldSpecified;

    LanguagesTypeLanguage[] languageField;

    uint pagesField;

    bool pagesFieldSpecified;

    string pageSizeField;

    ScanType scanField;

    /// <remarks />
    [XmlArrayItem("Barcode", IsNullable = false)]
    public BarcodeType[] Barcodes
    {
        get => barcodesField;
        set => barcodesField = value;
    }

    /// <remarks />
    public CoverType Cover
    {
        get => coverField;
        set => coverField = value;
    }

    /// <remarks />
    public string Name
    {
        get => nameField;
        set => nameField = value;
    }

    /// <remarks />
    public string Editorial
    {
        get => editorialField;
        set => editorialField = value;
    }

    /// <remarks />
    [XmlElement(DataType = "date")]
    public DateTime PublicationDate
    {
        get => publicationDateField;
        set => publicationDateField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool PublicationDateSpecified
    {
        get => publicationDateFieldSpecified;
        set => publicationDateFieldSpecified = value;
    }

    /// <remarks />
    public uint Number
    {
        get => numberField;
        set => numberField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool NumberSpecified
    {
        get => numberFieldSpecified;
        set => numberFieldSpecified = value;
    }

    /// <remarks />
    [XmlArrayItem("Language", IsNullable = false)]
    public LanguagesTypeLanguage[] Language
    {
        get => languageField;
        set => languageField = value;
    }

    /// <remarks />
    public uint Pages
    {
        get => pagesField;
        set => pagesField = value;
    }

    /// <remarks />
    [XmlIgnore]
    public bool PagesSpecified
    {
        get => pagesFieldSpecified;
        set => pagesFieldSpecified = value;
    }

    /// <remarks />
    public string PageSize
    {
        get => pageSizeField;
        set => pageSizeField = value;
    }

    /// <remarks />
    public ScanType Scan
    {
        get => scanField;
        set => scanField = value;
    }
}

/// <remarks />
[GeneratedCode("xsd", "0.0.0.0"), SerializableAttribute, XmlType(AnonymousType = true)]
public enum ArchitecturesTypeArchitecture
{
    /// <remarks />
    [XmlEnum("4004")]
    Item4004,

    /// <remarks />
    [XmlEnum("4040")]
    Item4040,

    /// <remarks />
    [XmlEnum("6502")]
    Item6502,

    /// <remarks />
    [XmlEnum("65816")]
    Item65816,

    /// <remarks />
    [XmlEnum("8008")]
    Item8008,

    /// <remarks />
    [XmlEnum("8051")]
    Item8051,

    /// <remarks />
    [XmlEnum("8080")]
    Item8080,

    /// <remarks />
    [XmlEnum("8085")]
    Item8085,

    /// <remarks />
    aarch64,

    /// <remarks />
    am29000,

    /// <remarks />
    amd64,

    /// <remarks />
    apx432,

    /// <remarks />
    arm,

    /// <remarks />
    avr,

    /// <remarks />
    avr32,

    /// <remarks />
    axp,

    /// <remarks />
    clipper,

    /// <remarks />
    cray,

    /// <remarks />
    esa390,

    /// <remarks />
    hobbit,

    /// <remarks />
    i86,

    /// <remarks />
    i860,

    /// <remarks />
    i960,

    /// <remarks />
    ia32,

    /// <remarks />
    ia64,

    /// <remarks />
    m56k,

    /// <remarks />
    m6800,

    /// <remarks />
    m6801,

    /// <remarks />
    m6805,

    /// <remarks />
    m6809,

    /// <remarks />
    m68k,

    /// <remarks />
    m88k,

    /// <remarks />
    mcs41,

    /// <remarks />
    mcs48,

    /// <remarks />
    mips32,

    /// <remarks />
    mips64,

    /// <remarks />
    msp430,

    /// <remarks />
    nios2,

    /// <remarks />
    openrisc,

    /// <remarks />
    parisc,

    /// <remarks />
    pdp1,

    /// <remarks />
    pdp10,

    /// <remarks />
    pdp11,

    /// <remarks />
    pdp7,

    /// <remarks />
    pdp8,

    /// <remarks />
    pic,

    /// <remarks />
    power,

    /// <remarks />
    ppc,

    /// <remarks />
    ppc64,

    /// <remarks />
    prism,

    /// <remarks />
    renesasrx,

    /// <remarks />
    riscv,

    /// <remarks />
    s360,

    /// <remarks />
    s370,

    /// <remarks />
    sh,

    /// <remarks />
    sh1,

    /// <remarks />
    sh2,

    /// <remarks />
    sh3,

    /// <remarks />
    sh4,

    /// <remarks />
    sh5,

    /// <remarks />
    sh64,

    /// <remarks />
    sparc,

    /// <remarks />
    sparc64,

    /// <remarks />
    transputer,

    /// <remarks />
    vax,

    /// <remarks />
    we32000,

    /// <remarks />
    x32,

    /// <remarks />
    z80,

    /// <remarks />
    z800,

    /// <remarks />
    z8000,

    /// <remarks />
    z80000,

    /// <remarks />
    zarch
}